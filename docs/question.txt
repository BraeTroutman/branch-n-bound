Implement a backtracking algorithm to solve the Subset-Sum problem: you must provide pseudocode for and/or explain how your 'choose', 'expand', and 'test' functions work and why they are effective at choosing, generating, and accepting/rejecting solutions in such a way that we can effectively eliminate branches of the solution space. Draw a tree demonstrating the execution of your algorithm on a small instance of the problem, with a set of 4 integers, e.g. [1,2,3,4] and some goal sum. If your goal is achievable given the set of numbers, how much of your tree do you explore? Would the algorithm perform similarly if the problem instance had no solution?

